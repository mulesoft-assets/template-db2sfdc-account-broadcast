<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Database to Salesforce Account Broadcast</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce administrator I want to synchronize accounts between a database and a Salesforce organization.

This template is a foundation for the process of broadcasting accounts from a database to a Salesfoce instance. Everytime there is new account or a change in an already existing one, the integration polls for changes in the database source instance and is responsible for upserting the account into Salesforce.

Requirements have been set not only to be used as examples, but also to establish a starting point to adapt your integration to your requirements.

As implemented, this template leverages the batch module. The batch job is divided into *Process* and *On Complete* stages. The integration is triggered by a scheduler defined in the flow that triggers the application, queries the newest database updates or creations that match a filter criteria and executes the batch job. During the *Process* stage, each database account isbe filtered depending on if it has an existing matching Account in Salesforce. The last step of the *Process* stage groups the accounts and creates or updates them in Salesforce. Finally during the *On Complete* stage, the template logs output statistics data on the console.
		</section>
		<section id="considerations">
<![CDATA[
To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both the source (database) and destination (Salesforce) systems, that must be made in order for all to run smoothly. 
Failing to do so could lead to unexpected behavior of the template.

This template illustrate the broadcast use case between a database and Salesforce, thus it requires a database instance to work.
The template comes packaged with a SQL script to create the database table that the template uses. It is your responsibility to use that script to create the table in an available schema and change the configuration accordingly. The SQL script file can be found in src/main/resources/account.sql.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
**Batch Aggregator Configuration**
+ page.size `200`

**Scheduler Configuration**
+ scheduler.frequency `10000`
+ scheduler.startDelay `100`

**Watermarking Default Last Query Timestamp**
+ watermark.default.expression `2018-12-13T03:00:59Z`

**Database Connector Configuration**
+ db.host `localhost`
+ db.port `3306`
+ db.user `user-name1`
+ db.password `user-password1`
+ db.databasename `dbname1`

**Note:** If you need to connect to a different database, provide a JAR file for the library and change the value of that field in the connector.

**Salesforce Connector Configuration**
+ sfdc.username `joan.baez@orgb`
+ sfdc.password `JoanBaez456`
+ sfdc.securityToken `ces56arl7apQs56XTddf34X`

]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API calls that can be made. Therefore calculating this amount may be an important factor to consider. The account broadcast template calls to the API can be calculated using the formula:

***1 + X + X / ${page.size}***

***X*** is the number of accounts to be synchronized on each run. 

Dividing by ***${page.size}*** is because, by default, accounts are gathered in groups of ${page.size} for each upsert API call in the commit step. Also consider that these calls execute repeatedly every polling cycle.	

For instance if 10 records are fetched from an origin instance, then 12 API calls have to be made (1 + 10 + 1).
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This file is formed by two flows.

The scheduler flow contains the Scheduler endpoint that periodically triggers the watermarking flow and executes the batch job process.

The watermarking flow contains watermarking logic that queries the database for updated or created accounts that meet the defined criteria in the query since the last polling. The last invocation timestamp is stored by using the Object Store component and updates after each database query.

]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
The functional aspect of the template is implemented on this XML, directed by a batch job that's responsible for creations and updates. 
The several message processors constitute four high level actions that fully implement the logic of this template:

1. Job execution is invoked from SchedulerFlow (endpoints.xml) every time there is a new query executed asking for created or updated accounts.
2. During the *Process* stage, each database account is filtered depending on if it has an existing matching account in Salesforce.
3. The last step of the *Process* stage groups the accounts and creates or updates them in Salesforce.
4. Finally during the *On Complete* stage, the template logs the output statistics data on the console.
]]>
		</section>
	</sections>
</configuration>
